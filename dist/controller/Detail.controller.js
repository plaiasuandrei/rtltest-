/*global location */
sap.ui.define([
	"rtl/controller/BaseController",
	"sap/ui/model/json/JSONModel",
	"rtl/model/formatter",
	"sap/ui/model/Filter",
	"sap/ui/model/FilterOperator"
], function (BaseController, JSONModel, formatter, Filter, FilterOperator) {
	"use strict";
	return BaseController.extend("rtl.controller.Detail", {
		formatter: formatter,
		/* =========================================================== */
		/* lifecycle methods                                           */
		/* =========================================================== */
popoverOpen: false,
		onInit: function () {
			// Model used to manipulate control states. The chosen values make sure,
			// detail page is busy indication immediately so there is no break in
			// between the busy indication for loading the view's meta data
var oViewModel = new JSONModel({
				busy: false,
				delay: 0,
				lineItemListTitle: this.getResourceBundle().getText("detailLineItemTableHeading"),
				isDetailObjectHeaderVisisble: true,
				displayEmployeeSearchField: false,
				displayRejectionConfirmButton: false,
				displaySearchPOLayout: true,
				displaySearchCostElementsLayout: false,
				count: 0,
				poListBusy: true,
				showRejectionTab: false
			});
			var oModel = new JSONModel("model/ponumbers.json");
			this.setModel(oModel, "ponumbers");
			this.getRouter().getRoute("object").attachPatternMatched(this._onObjectMatched, this);
			this.setModel(oViewModel, "detailView");
			this.getOwnerComponent().getModel().metadataLoaded().then(this._onMetadataLoaded.bind(this));
		},
		/* =========================================================== */
		/* event handlers                                              */
		/* =========================================================== */
		/**
		 * After list data is available, this handler method updates the
		 * icon tab filter counter 
		 * @param {sap.ui.base.Event} oEvent the update finished event
		 * @public
		 */
onBeforeRendering: function () {
			this.getModel().refresh();
		},
		onUpdateFinished: function (oEvent) {
			// update the master list object counter after new data is loaded
this._updateListItemCount(oEvent.getParameter("total"));
			this.getModel("detailView").setProperty("/poListBusy", false);
		},
		/**
		 * Event handler when the share by E-Mail button has been clicked
		 * @public
		 */
onShareEmailPress: function () {
			var oViewModel = this.getModel("detailView");
			sap.m.URLHelper.triggerEmail(null, oViewModel.getProperty("/shareSendEmailSubject"), oViewModel.getProperty("/shareSendEmailMessage"));
		},
		/**
		 *@memberOf rtl.controller.Detail
		 * When the tab for searching is selected the detailObjectHeader should be rendered invisible
		 * On any other tab is should be made visisble again
		 */
onTabSelect: function (oEvent) {
			//This code was generated by the layout editor.
var oViewModel = this.getModel("detailView");
			var sKey = oEvent.getParameter("selectedKey");
			var rejectionTab = sKey.toString().indexOf("rejectFilter", 0) !== -1;
			if (sKey.toString().indexOf("searchFilter", 0) !== -1 || rejectionTab) {
				oViewModel.setProperty("/isDetailObjectHeaderVisisble", false);
			} else {
				oViewModel.setProperty("/isDetailObjectHeaderVisisble", true);
			}
			if (rejectionTab) {
				oViewModel.setProperty("/enableRejectButton", true);
			}
		},
		/**
		 * Updates the item count within the line item table's header
		 * @param {object} oEvent an event containing the total number of items in the list
		 * @private
		 */
onListUpdateFinished: function (oEvent) {
			var sTitle, iTotalItems = oEvent.getParameter("total"), oViewModel = this.getModel("detailView");
			// only update the counter if the length is final
if (this.byId("lineItemsList").getBinding("items").isLengthFinal()) {
				if (iTotalItems) {
					sTitle = this.getResourceBundle().getText("detailLineItemTableHeadingCount", [iTotalItems]);
				} else {
					//Display 'Line Items' instead of 'Line items (0)'
sTitle = this.getResourceBundle().getText("detailLineItemTableHeading");
				}
				oViewModel.setProperty("/lineItemListTitle", sTitle);
			}
		},
		/* =========================================================== */
		/* begin: internal methods                                     */
		/* =========================================================== */
		/**
		 * Binds the view to the object path and expands the aggregated line items.
		 * @function
		 * @param {sap.ui.base.Event} oEvent pattern match event in route 'object'
		 * @private
		 */
_onObjectMatched: function (oEvent) {
			var sObjectId = oEvent.getParameter("arguments").objectId;
			//	var sItemId = oEvent.getParameter("arguments").itemId;
this.getModel().metadataLoaded().then(function () {
				var sObjectPath = this.getModel().createKey("ocrInvoiceSet", { Document: sObjectId });
				this._bindView("/" + sObjectPath);
			}.bind(this));
		},
		/**
		 * Sets the item count on the search icon tab filter
		 * @param {integer} iTotalItems the total number of items in the list
		 * @private
		 */
_updateListItemCount: function (iTotalItems) {
			this.getModel("detailView").setProperty("/count", iTotalItems);
		},
		/**
		 * Binds the view to the object path. Makes sure that detail view displays
		 * a busy indicator while data for the corresponding element binding is loaded.
		 * @function
		 * @param {string} sObjectPath path to the object to be bound to the view.
		 * @private
		 */
_bindView: function (sObjectPath) {
			// Set busy indicator during view binding
var oViewModel = this.getModel("detailView");
			// If the view was not bound yet its not busy, only if the binding requests data it is set to busy again
oViewModel.setProperty("/busy", false);
			this.getView().bindElement({
				path: sObjectPath,
				events: {
					change: this._onBindingChange.bind(this),
					dataRequested: function () {
						oViewModel.setProperty("/busy", true);
					},
					dataReceived: function () {
						oViewModel.setProperty("/busy", false);	//when tha data is
					}
				}
			});
		},
		_onBindingChange: function () {
			var oView = this.getView(), oElementBinding = oView.getElementBinding();
			// No data for the binding
if (!oElementBinding.getBoundContext()) {
				this.getRouter().getTargets().display("detailObjectNotFound");
				// if object could not be found, the selection in the master list
				// does not make sense anymore.
this.getOwnerComponent().oListSelector.clearMasterListSelection();
				return;
			}
			var sPath = oElementBinding.getPath(), oResourceBundle = this.getResourceBundle(), oObject = oView.getModel().getObject(sPath), sObjectId = oObject.Document, sCompanyCode = oObject.Bukrs, sObjectName = oObject.RdVendorName, oViewModel = this.getModel("detailView");
			this.getOwnerComponent().oListSelector.selectAListItem(sPath);
			oViewModel.setProperty("/shareSendEmailSubject", oResourceBundle.getText("shareSendEmailObjectSubject", [sObjectId]));
			oViewModel.setProperty("/shareSendEmailMessage", oResourceBundle.getText("shareSendEmailObjectMessage", [
				sObjectName,
				sObjectId,
				location.href
			]));
			// reset rejection group button
oView.byId("rejectionGroup").setSelectedIndex(-1);
			this.onRejectionReassign(-1);
			// reset PO number search
var aFilters = [];
			aFilters.push(new sap.ui.model.Filter("BUKRS", sap.ui.model.FilterOperator.EQ, sCompanyCode));
			// 			var oBinding = 
var oList = oView.byId("POItemList");
			oList.getBinding("items").filter(aFilters);
			oViewModel.setProperty("/poListBusy", false);
			var oTable = oView.byId("ocrInvoiceLTable");
			oTable.getBinding("items");
		},
		_onMetadataLoaded: function () {
			// Store original busy indicator delay for the detail view
var iOriginalViewBusyDelay = this.getView().getBusyIndicatorDelay(), oViewModel = this.getModel("detailView");
			// oLineItemTable = this.byId("lineItemsList"),
			// iOriginalLineItemTableBusyDelay = oLineItemTable.getBusyIndicatorDelay();
			// Make sure busy indicator is displayed immediately when
			// detail view is displayed for the first time
oViewModel.setProperty("/delay", 0);
			oViewModel.setProperty("/lineItemTableDelay", 0);
			// 			oLineItemTable.attachEventOnce("updateFinished", function() {
			// Restore original busy indicator delay for line item table
			// oViewModel.setProperty("/lineItemTableDelay", iOriginalLineItemTableBusyDelay);
			// 			});
			// Binding the view will set it to not busy - so the view is always busy if it is not bound
oViewModel.setProperty("/busy", true);
			// Restore original busy indicator delay for the detail view
oViewModel.setProperty("/delay", iOriginalViewBusyDelay);
		},
		/**
		 *@memberOf rtl.controller.Detail
		 */
onAttachment: function (oEvent) {
			var oContext = oEvent.getSource().getBindingContext();
			var sMediaSrc = oContext.getProperty().__metadata.media_src;
			sap.m.URLHelper.redirect(sMediaSrc, true);
		},
		/**
		 *@memberOf rtl.controller.Detail
		 */
onRejectionReassign: function (oEvent) {
			//This code was generated by the layout editor.
var bValue = undefined;
			try {
				var sValue = oEvent.getParameter("selectedItem").getProperty("key");
			} catch (err) {
				try {
					sValue = oEvent.getParameter("selectedIndex");
				} catch (err2) {
					sValue = "default";
				}
			}
			switch (sValue) {
			case "sendBackItem":
			case 0:
				bValue = false;
				this.getModel("detailView").setProperty("/displayEmployeeSearchField", bValue);
				bValue = !bValue;
				this.getModel("detailView").setProperty("/displayRejectionConfirmButton", bValue);
				break;
			case "reassignItem":
			case 1:
				bValue = true;
				this.getModel("detailView").setProperty("/displayEmployeeSearchField", bValue);
				bValue = !bValue;
				this.getModel("detailView").setProperty("/displayRejectionConfirmButton", bValue);
				break;
			case -1:
			case "default":
				bValue = false;
				this.getModel("detailView").setProperty("/displayEmployeeSearchField", bValue);
				this.getModel("detailView").setProperty("/displayRejectionConfirmButton", bValue);
				break;
			default:
			}
		},
		/**
		 *@memberOf rtl.controller.Detail
		 */
onCostCenterSuggest: function (oEvent) {
			//This code was generated by the layout editor.
var value = oEvent.getParameter("suggestValue");
			var filters = [];
			if (value) {
				filters = [new sap.ui.model.Filter("KOSTL", sap.ui.model.FilterOperator.Contains, value)];	// filters = [new sap.ui.model.Filter([
                                                                                               // 	new sap.ui.model.Filter("KOSTL", sap.ui.model.FilterOperator.Contains, value),
                                                                                               // 	new sap.ui.model.Filter("MCTXT", sap.ui.model.FilterOperator.Contains, value)
                                                                                               // ], true)];
			}
			var oSearchCC = this.getView().byId("CostCenterSearch");
			oSearchCC.getBinding("suggestionItems").filter(filters, "Application");
			oSearchCC.getBinding("suggestionItems").attachDataReceived(function () {
				oSearchCC.suggest(true);
			});
			oSearchCC.getBinding("suggestionItems").attachChange(function () {
				oSearchCC.suggest(true);
			});
			oSearchCC.suggest(true);
		},
		/**
		 *@memberOf rtl.controller.Detail
		 */
onCostCenterLiveChange: function () {
//This code was generated by the layout editor.
		},
		onCostCenterSearch: function (event) {
			//This code was generated by the layout editor.
var item = event.getParameter("suggestionItem");
			if (item) {
				sap.m.MessageToast.show("Item " + item.getDescription() + " was selected.");
			}
		},
		/**
		 *@memberOf rtl.controller.Detail
		 */
onSwitchChange: function (oEvent) {
			//This code was generated by the layout editor.
			// when turned off the swithch will hide the search po vertical layout: searchPOLayout
			// and will make visisble the search cost elements layout: searchCostElementsLayout
var sState = oEvent.getParameter("state");
			if (sState) {
				this.getModel("detailView").setProperty("/displaySearchPOLayout", true);
				this.getModel("detailView").setProperty("/displaySearchCostElementsLayout", false);
			} else {
				this.getModel("detailView").setProperty("/displaySearchPOLayout", false);
				this.getModel("detailView").setProperty("/displaySearchCostElementsLayout", true);
			}
		},
		/**
		 *@memberOf rtl.controller.Detail
		 */
onInfoButtonPress: function () {
			//This code was generated by the layout editor.
this.getRouter().navTo("helpPage");
		},
		/**
		 *@memberOf rtl.controller.Detail
		 */
onPOSearch: function (oEvent) {
			//This code was generated by the layout editor.
var sQuery = oEvent.getSource().getValue();
			if (sQuery) {
				var oFilter = new Filter("SEARCHVALUE", FilterOperator.Contains, sQuery);
			}
			var POList = this.getView().byId("POItemList");
			var oBinding = POList.getBinding("items");
			oBinding.filter(oFilter, "Application");
		},
		/**
		 *@memberOf rtl.controller.Detail
		 */
handleSuggestCostCenterInput: function (oEvent) {
			//This code was generated by the layout editor.
var sTerm = oEvent.getParameter("suggestValue");
			var aFilters = [];
			if (sTerm) {
				aFilters.push(new Filter("KOSTL", sap.ui.model.FilterOperator.Contains, sTerm));	// 		aFilters = [new sap.ui.model.Filter([
                                                                                     // 			new sap.ui.model.Filter("KOSTL", sap.ui.model.FilterOperator.Contains, sTerm),
                                                                                     // 			new sap.ui.model.Filter("MCTXT", sap.ui.model.FilterOperator.Contains, sTerm)
                                                                                     // 		], true)];
			}
			this.getModel().setUseBatch(false);
			oEvent.getSource().getBinding("suggestionItems").filter(aFilters);	// 	oEvent.getSource().addSuggestionItem( new sap.ui.core.Item(
                                                                      // 	                                                    "testitem", 
                                                                      // 	                                                    {text: "test"}
                                                                      // 	                                                    ));
                                                                      // 	var inputCC = this.getView().byId("inputCostCenter");
                                                                      //          inputCC.setShowSuggestion(false);
                                                                      //          oEvent.getSource().getBinding("suggestionItems").attachDataReceived(function() {
                                                                      // 		//  this.refresh();
                                                                      // 		inputCC.getBinding("suggestionItems").fireEvent("change");
                                                                      // 		inputCC.getModel().updateBindings();
                                                                      //          });
                                                                      // 	oEvent.getSource().getBinding("suggestionItems").attachChange(function() {
                                                                      //              var binding = inputCC.getBinding("suggestionItems");
                                                                      //              var aggr = inputCC.getAggregation("suggestionItems");
                                                                      //              var items = inputCC.getSuggestionItems();
                                                                      //              var shows = inputCC.getShowSuggestion();
                                                                      //              if (!shows) {
                                                                      //              	inputCC.setShowSuggestion(true);
                                                                      //              }
                                                                      // 	});
		}	//highlighting even more the searched values
    // 		highlight: function(text) {
    // 			inputText = $('#oInput-popup').find('.sapMSLITitleOnly');
    // 			for (var i = 0; i < inputText.length; i++) {
    // 				var innerHTML = inputText[i].innerHTML;
    // 				var index = innerHTML.indexOf(text.toUpperCase());
    // 				if (index >= 0) {
    // 					innerHTML = innerHTML.substring(0, index) + "<span class='highlight'>" + innerHTML.substring(index, index + text.length) +
    // 						"</span>" + innerHTML.substring(index + text.length);
    // 					inputText[i].innerHTML = innerHTML
    // 				}
    // 			}
    // 		}
,
		/**
		 *@memberOf rtl.controller.Detail
		 */
onSuggestionSelected: function (oEvent) {
			//This code was generated by the layout editor.
			// set the value state of the event origin to green :)
oEvent.getSource().setValueState(sap.ui.core.ValueState.Success);
		},
		/**
		 *@memberOf rtl.controller.Detail
		 */
onPOItemSelection: function (oEvent) {
			//This code was generated by the layout editor.
			// 			if the popover is open.. do not close it the first time	
if (this.popoverOpen === false) {
				var oSource = oEvent.getSource();
				var oContent = [];
				oContent = oSource.getAggregation("content");
				for (var i in oContent) {
					oContent[i].setVisible(!oContent[i].getProperty("visible"));
				}
			} else {
				this.popoverOpen = !this.popoverOpened;
			}
		},
		/**
		 *@memberOf rtl.controller.Detail
		 */
onEmployeeSelected: function (oEvent) {
			//This code was generated by the layout editor.
var employee = oEvent.getSource().getProperty("title");
			if (employee) {
				sap.m.MessageToast.show("Employee " + employee.toLocaleString() + " was selected.");
			}
		},
		/**
		 *@memberOf rtl.controller.Detail
		 */
handleResponsivePopoverPress: function (oEvent) {
			//This code was generated by the layout editor.
if (!this._oPopover) {
				this._oPopover = sap.ui.xmlfragment("rtl.fragments.OCRLinePopover", this);
				// this._oPopover.bindElement("/ProductCollection/0");
this.getView().addDependent(this._oPopover);
			}
			var sPath = oEvent.getSource().getBindingContextPath();
			this._oPopover.bindElement(sPath);
			this.popoverOpen = true;
			this._oPopover.openBy(oEvent.getSource());
		},
		onPopoverBeforeClose: function () {
			this.popoverOpen = false;
		},
		/**
	*@memberOf rtl.controller.Detail
	*/
onRejectButtonPressed: function () {
//This code was generated by the layout editor.
	    var oModel = this.getModel("detailView");	
        oModel.setProperty("/showRejectionTab", true);   
        var oIconTabBar = this.getView().byId("iconTabBar");
        oIconTabBar.setSelectedKey("rejection");
}
	});
});